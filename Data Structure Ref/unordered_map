#include <iostream>
#include <unordered_map>

//************************* KEY *************************//
//			|											 //
//	//<-	|	PARAMETER(S)							 //
//			|	The parameter type(s) of a given member  //
//			|		function. This is followed by a		 //
//			|		brief description of the			 //
//			|		parameter(s) and their purpose.		 //
//			|											 //
//	//->	|	RETURN									 //
//			|	The return type of a given member		 //
//			|		function. This is followed by a		 //
//			|		brief description of the return		 //
//			|		value and its purpose.				 //
//			|											 //
//	[x]		|	DISCRIMINATOR							 //
//			|	"x" in this context is used to assist in //
//			|		identifying which inputs are		 // 
//			|		associated with which output		 //
//			|											 //
//*******************************************************//

int main() {
    std::unordered_map<int, int> foo;

	//
	//
	//	Capacity
	foo.empty()		//	Test whether container is empty
					//<-
					//->	boolean
					//			True if there are no elements in the container, 
					//			false if not.

	foo.size()		//	Return container size
					//<-
					//->	size_type
					//			The number of elements in the container.

	foo.max_size()	//	Return maximum size
					//<-
					//->	size_type
					//			The maximum number of elements the object can hold
					//			as content.

	//
	//
    //  Iterators
    foo.begin()     //	Return iterator to beginning
					//<-[1]		
					//<-[2]	size_type n
					//			"n" represents a bucket number.
					//->[1]	iterator, const_iterator
					//			An iterator to the first element in the container.
					//->[2]	local_iterator, const_local_iterator
					//			An local_iterator to the first element in the bucket.

    foo.end()       //	Return iterator to end
					//<-[1]		
					//<-[2]	size_type n
					//			"n" represents a bucket number.
					//->[1]	iterator, const_iterator
					//			An iterator to the element past the end of the
					//			container.
					//->[2]	local_iterator, const_local_iterator
					//			An local_iterator to the element past the end of the
					//			bucket.

    foo.cbegin()	//	Return const_iterator to beginning
					//<-[1]		
					//<-[2]	size_type n
					//			"n" represents a bucket number.
					//->[1]	const_iterator
					//			A const_iterator to the first element in the container.
					//->[2]	const_local_iterator
					//			A const_local_iterator to the first element in the bucket.

    foo.cend()		//	Return const_iterator to end

	//
	//
	//

    return 0;
}